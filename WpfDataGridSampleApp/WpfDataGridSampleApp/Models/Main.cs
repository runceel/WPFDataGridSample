using Prism.Mvvm;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WpfDataGridSampleApp.Commons;

namespace WpfDataGridSampleApp.Models
{
    public class Main : BindableBase
    {
        public ObservableCollection<Scenario> Scenarios { get; } = new ObservableCollection<Scenario>(new[] 
        {
            new Scenario { Name = "列自動生成", ViewName = "AutoGeneratedView" },
            new Scenario { Name = "カスタム列自動生成", ViewName = "CustomAutoGeneratedColumnView" },
            new Scenario { Name = "列の定義", ViewName = "ColumnsView" },
            new Scenario { Name = "パフォーマンス", ViewName = "LargeColumnPerformanceView" },
            new Scenario { Name = "パフォーマンス(改善)", ViewName = "LargeColumnPerformanceImprovementView" },
        });

        public ReadOnlyObservableCollection<EnumLabelPair<Gender>> Genders { get; } = new ReadOnlyObservableCollection<EnumLabelPair<Gender>>(
            new ObservableCollection<EnumLabelPair<Gender>>(EnumLabelPair.CreateFromDisplayAttribute<Gender>()));

        private bool isLoaded;

        public bool IsLoaded
        {
            get { return this.isLoaded; }
            set { this.SetProperty(ref this.isLoaded, value); }
        }

        public ObservableCollection<Person> People { get; } = new ObservableCollection<Person>();

        public Main()
        {
            this.LoadDataAsync()
                .ContinueWith(_ => this.IsLoaded = true)
                .InvokeAndForget();
        }

        private Task LoadDataAsync()
        {
            return Task.Run(() =>
            {
                var r = new Random();
                var items = Enumerable.Range(1, 1000000)
                    .Select(x => new Person
                    {
                        Name = $"サンプル　太郎{x}",
                        Age = (r.Next(80) + 20).ToString(),
                        Gender = r.Next() % 2 == 0 ? Gender.Men : Gender.Women,
                    });
                foreach (var item in items)
                {
                    this.People.Add(item);
                }
            });
        }
    }
}
